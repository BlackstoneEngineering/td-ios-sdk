//
//  TDHttpClient.m
//  TreasureData
//
//  Created by Mitsunori Komatsu on 5/29/14.
//  Copyright (c) 2014 Treasure Data Inc. All rights reserved.
//

#import "TDHttpClient.h"

@interface TDHttpClient ()
@property(nonatomic, strong) NSURLConnection *conn;
@property(nonatomic, strong) NSMutableData *responseData;
@property(nonatomic, strong) NSURLResponse *response;
@property(nonatomic, strong) NSError *error;
@property bool isFinished;
@property bool isLoggingEnabled;
@end

const static unsigned char GD_BUNDLE_DER[] = {
    0x30, 0x82, 0x04, 0xd0, 0x30, 0x82, 0x03, 0xb8,
    0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x01, 0x07,
    0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86,
    0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30,
    0x81, 0x83, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03,
    0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31,
    0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x08,
    0x13, 0x07, 0x41, 0x72, 0x69, 0x7a, 0x6f, 0x6e,
    0x61, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55,
    0x04, 0x07, 0x13, 0x0a, 0x53, 0x63, 0x6f, 0x74,
    0x74, 0x73, 0x64, 0x61, 0x6c, 0x65, 0x31, 0x1a,
    0x30, 0x18, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13,
    0x11, 0x47, 0x6f, 0x44, 0x61, 0x64, 0x64, 0x79,
    0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x20, 0x49, 0x6e,
    0x63, 0x2e, 0x31, 0x31, 0x30, 0x2f, 0x06, 0x03,
    0x55, 0x04, 0x03, 0x13, 0x28, 0x47, 0x6f, 0x20,
    0x44, 0x61, 0x64, 0x64, 0x79, 0x20, 0x52, 0x6f,
    0x6f, 0x74, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,
    0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x41,
    0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
    0x20, 0x2d, 0x20, 0x47, 0x32, 0x30, 0x1e, 0x17,
    0x0d, 0x31, 0x31, 0x30, 0x35, 0x30, 0x33, 0x30,
    0x37, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x17, 0x0d,
    0x33, 0x31, 0x30, 0x35, 0x30, 0x33, 0x30, 0x37,
    0x30, 0x30, 0x30, 0x30, 0x5a, 0x30, 0x81, 0xb4,
    0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04,
    0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x10, 0x30,
    0x0e, 0x06, 0x03, 0x55, 0x04, 0x08, 0x13, 0x07,
    0x41, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x61, 0x31,
    0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x07,
    0x13, 0x0a, 0x53, 0x63, 0x6f, 0x74, 0x74, 0x73,
    0x64, 0x61, 0x6c, 0x65, 0x31, 0x1a, 0x30, 0x18,
    0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x11, 0x47,
    0x6f, 0x44, 0x61, 0x64, 0x64, 0x79, 0x2e, 0x63,
    0x6f, 0x6d, 0x2c, 0x20, 0x49, 0x6e, 0x63, 0x2e,
    0x31, 0x2d, 0x30, 0x2b, 0x06, 0x03, 0x55, 0x04,
    0x0b, 0x13, 0x24, 0x68, 0x74, 0x74, 0x70, 0x3a,
    0x2f, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x73, 0x2e,
    0x67, 0x6f, 0x64, 0x61, 0x64, 0x64, 0x79, 0x2e,
    0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x70, 0x6f,
    0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x31,
    0x33, 0x30, 0x31, 0x06, 0x03, 0x55, 0x04, 0x03,
    0x13, 0x2a, 0x47, 0x6f, 0x20, 0x44, 0x61, 0x64,
    0x64, 0x79, 0x20, 0x53, 0x65, 0x63, 0x75, 0x72,
    0x65, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
    0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x41, 0x75,
    0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x20,
    0x2d, 0x20, 0x47, 0x32, 0x30, 0x82, 0x01, 0x22,
    0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86,
    0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03,
    0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a,
    0x02, 0x82, 0x01, 0x01, 0x00, 0xb9, 0xe0, 0xcb,
    0x10, 0xd4, 0xaf, 0x76, 0xbd, 0xd4, 0x93, 0x62,
    0xeb, 0x30, 0x64, 0xb8, 0x81, 0x08, 0x6c, 0xc3,
    0x04, 0xd9, 0x62, 0x17, 0x8e, 0x2f, 0xff, 0x3e,
    0x65, 0xcf, 0x8f, 0xce, 0x62, 0xe6, 0x3c, 0x52,
    0x1c, 0xda, 0x16, 0x45, 0x4b, 0x55, 0xab, 0x78,
    0x6b, 0x63, 0x83, 0x62, 0x90, 0xce, 0x0f, 0x69,
    0x6c, 0x99, 0xc8, 0x1a, 0x14, 0x8b, 0x4c, 0xcc,
    0x45, 0x33, 0xea, 0x88, 0xdc, 0x9e, 0xa3, 0xaf,
    0x2b, 0xfe, 0x80, 0x61, 0x9d, 0x79, 0x57, 0xc4,
    0xcf, 0x2e, 0xf4, 0x3f, 0x30, 0x3c, 0x5d, 0x47,
    0xfc, 0x9a, 0x16, 0xbc, 0xc3, 0x37, 0x96, 0x41,
    0x51, 0x8e, 0x11, 0x4b, 0x54, 0xf8, 0x28, 0xbe,
    0xd0, 0x8c, 0xbe, 0xf0, 0x30, 0x38, 0x1e, 0xf3,
    0xb0, 0x26, 0xf8, 0x66, 0x47, 0x63, 0x6d, 0xde,
    0x71, 0x26, 0x47, 0x8f, 0x38, 0x47, 0x53, 0xd1,
    0x46, 0x1d, 0xb4, 0xe3, 0xdc, 0x00, 0xea, 0x45,
    0xac, 0xbd, 0xbc, 0x71, 0xd9, 0xaa, 0x6f, 0x00,
    0xdb, 0xdb, 0xcd, 0x30, 0x3a, 0x79, 0x4f, 0x5f,
    0x4c, 0x47, 0xf8, 0x1d, 0xef, 0x5b, 0xc2, 0xc4,
    0x9d, 0x60, 0x3b, 0xb1, 0xb2, 0x43, 0x91, 0xd8,
    0xa4, 0x33, 0x4e, 0xea, 0xb3, 0xd6, 0x27, 0x4f,
    0xad, 0x25, 0x8a, 0xa5, 0xc6, 0xf4, 0xd5, 0xd0,
    0xa6, 0xae, 0x74, 0x05, 0x64, 0x57, 0x88, 0xb5,
    0x44, 0x55, 0xd4, 0x2d, 0x2a, 0x3a, 0x3e, 0xf8,
    0xb8, 0xbd, 0xe9, 0x32, 0x0a, 0x02, 0x94, 0x64,
    0xc4, 0x16, 0x3a, 0x50, 0xf1, 0x4a, 0xae, 0xe7,
    0x79, 0x33, 0xaf, 0x0c, 0x20, 0x07, 0x7f, 0xe8,
    0xdf, 0x04, 0x39, 0xc2, 0x69, 0x02, 0x6c, 0x63,
    0x52, 0xfa, 0x77, 0xc1, 0x1b, 0xc8, 0x74, 0x87,
    0xc8, 0xb9, 0x93, 0x18, 0x50, 0x54, 0x35, 0x4b,
    0x69, 0x4e, 0xbc, 0x3b, 0xd3, 0x49, 0x2e, 0x1f,
    0xdc, 0xc1, 0xd2, 0x52, 0xfb, 0x02, 0x03, 0x01,
    0x00, 0x01, 0xa3, 0x82, 0x01, 0x1a, 0x30, 0x82,
    0x01, 0x16, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d,
    0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03,
    0x01, 0x01, 0xff, 0x30, 0x0e, 0x06, 0x03, 0x55,
    0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03,
    0x02, 0x01, 0x06, 0x30, 0x1d, 0x06, 0x03, 0x55,
    0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x40, 0xc2,
    0xbd, 0x27, 0x8e, 0xcc, 0x34, 0x83, 0x30, 0xa2,
    0x33, 0xd7, 0xfb, 0x6c, 0xb3, 0xf0, 0xb4, 0x2c,
    0x80, 0xce, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d,
    0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x3a,
    0x9a, 0x85, 0x07, 0x10, 0x67, 0x28, 0xb6, 0xef,
    0xf6, 0xbd, 0x05, 0x41, 0x6e, 0x20, 0xc1, 0x94,
    0xda, 0x0f, 0xde, 0x30, 0x34, 0x06, 0x08, 0x2b,
    0x06, 0x01, 0x05, 0x05, 0x07, 0x01, 0x01, 0x04,
    0x28, 0x30, 0x26, 0x30, 0x24, 0x06, 0x08, 0x2b,
    0x06, 0x01, 0x05, 0x05, 0x07, 0x30, 0x01, 0x86,
    0x18, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
    0x6f, 0x63, 0x73, 0x70, 0x2e, 0x67, 0x6f, 0x64,
    0x61, 0x64, 0x64, 0x79, 0x2e, 0x63, 0x6f, 0x6d,
    0x2f, 0x30, 0x35, 0x06, 0x03, 0x55, 0x1d, 0x1f,
    0x04, 0x2e, 0x30, 0x2c, 0x30, 0x2a, 0xa0, 0x28,
    0xa0, 0x26, 0x86, 0x24, 0x68, 0x74, 0x74, 0x70,
    0x3a, 0x2f, 0x2f, 0x63, 0x72, 0x6c, 0x2e, 0x67,
    0x6f, 0x64, 0x61, 0x64, 0x64, 0x79, 0x2e, 0x63,
    0x6f, 0x6d, 0x2f, 0x67, 0x64, 0x72, 0x6f, 0x6f,
    0x74, 0x2d, 0x67, 0x32, 0x2e, 0x63, 0x72, 0x6c,
    0x30, 0x46, 0x06, 0x03, 0x55, 0x1d, 0x20, 0x04,
    0x3f, 0x30, 0x3d, 0x30, 0x3b, 0x06, 0x04, 0x55,
    0x1d, 0x20, 0x00, 0x30, 0x33, 0x30, 0x31, 0x06,
    0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x02,
    0x01, 0x16, 0x25, 0x68, 0x74, 0x74, 0x70, 0x73,
    0x3a, 0x2f, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x73,
    0x2e, 0x67, 0x6f, 0x64, 0x61, 0x64, 0x64, 0x79,
    0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x70,
    0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2f,
    0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86,
    0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03,
    0x82, 0x01, 0x01, 0x00, 0x08, 0x7e, 0x6c, 0x93,
    0x10, 0xc8, 0x38, 0xb8, 0x96, 0xa9, 0x90, 0x4b,
    0xff, 0xa1, 0x5f, 0x4f, 0x04, 0xef, 0x6c, 0x3e,
    0x9c, 0x88, 0x06, 0xc9, 0x50, 0x8f, 0xa6, 0x73,
    0xf7, 0x57, 0x31, 0x1b, 0xbe, 0xbc, 0xe4, 0x2f,
    0xdb, 0xf8, 0xba, 0xd3, 0x5b, 0xe0, 0xb4, 0xe7,
    0xe6, 0x79, 0x62, 0x0e, 0x0c, 0xa2, 0xd7, 0x6a,
    0x63, 0x73, 0x31, 0xb5, 0xf5, 0xa8, 0x48, 0xa4,
    0x3b, 0x08, 0x2d, 0xa2, 0x5d, 0x90, 0xd7, 0xb4,
    0x7c, 0x25, 0x4f, 0x11, 0x56, 0x30, 0xc4, 0xb6,
    0x44, 0x9d, 0x7b, 0x2c, 0x9d, 0xe5, 0x5e, 0xe6,
    0xef, 0x0c, 0x61, 0xaa, 0xbf, 0xe4, 0x2a, 0x1b,
    0xee, 0x84, 0x9e, 0xb8, 0x83, 0x7d, 0xc1, 0x43,
    0xce, 0x44, 0xa7, 0x13, 0x70, 0x0d, 0x91, 0x1f,
    0xf4, 0xc8, 0x13, 0xad, 0x83, 0x60, 0xd9, 0xd8,
    0x72, 0xa8, 0x73, 0x24, 0x1e, 0xb5, 0xac, 0x22,
    0x0e, 0xca, 0x17, 0x89, 0x62, 0x58, 0x44, 0x1b,
    0xab, 0x89, 0x25, 0x01, 0x00, 0x0f, 0xcd, 0xc4,
    0x1b, 0x62, 0xdb, 0x51, 0xb4, 0xd3, 0x0f, 0x51,
    0x2a, 0x9b, 0xf4, 0xbc, 0x73, 0xfc, 0x76, 0xce,
    0x36, 0xa4, 0xcd, 0xd9, 0xd8, 0x2c, 0xea, 0xae,
    0x9b, 0xf5, 0x2a, 0xb2, 0x90, 0xd1, 0x4d, 0x75, 
    0x18, 0x8a, 0x3f, 0x8a, 0x41, 0x90, 0x23, 0x7d, 
    0x5b, 0x4b, 0xfe, 0xa4, 0x03, 0x58, 0x9b, 0x46, 
    0xb2, 0xc3, 0x60, 0x60, 0x83, 0xf8, 0x7d, 0x50, 
    0x41, 0xce, 0xc2, 0xa1, 0x90, 0xc3, 0xbb, 0xef, 
    0x02, 0x2f, 0xd2, 0x15, 0x54, 0xee, 0x44, 0x15, 
    0xd9, 0x0a, 0xae, 0xa7, 0x8a, 0x33, 0xed, 0xb1, 
    0x2d, 0x76, 0x36, 0x26, 0xdc, 0x04, 0xeb, 0x9f, 
    0xf7, 0x61, 0x1f, 0x15, 0xdc, 0x87, 0x6f, 0xee, 
    0x46, 0x96, 0x28, 0xad, 0xa1, 0x26, 0x7d, 0x0a, 
    0x09, 0xa7, 0x2e, 0x04, 0xa3, 0x8d, 0xbc, 0xf8, 
    0xbc, 0x04, 0x30, 0x01
};

@implementation TDHttpClient

- (void)setLogging:(bool)isLoggingEnabled {
    self.isLoggingEnabled = isLoggingEnabled;
}

- (NSData *)sendRequest:(NSURLRequest *)request returningResponse:(NSURLResponse **)response error:(NSError **)error {
    self.conn = [[NSURLConnection alloc] initWithRequest:request delegate:self];
    if (!self.conn) {
        if (self.isLoggingEnabled) {
            NSLog(@"Connection wasn't created");
        }
        return nil;
    }

    int count = 20;
    self.response = nil;
    self.responseData = [[NSMutableData alloc]init];
    self.error = nil;
    self.isFinished = false;
    while (!self.isFinished && count-- > 0) {
        if (self.isLoggingEnabled) {
            NSLog(@"Waiting...");
        }
        [[NSRunLoop currentRunLoop] runUntilDate:[NSDate dateWithTimeIntervalSinceNow:0.5]];
    }
    if (self.isLoggingEnabled) {
        NSLog(@"error=%@", self.error);
        NSLog(@"responseData=%@", [[NSString alloc] initWithData:self.responseData encoding:NSUTF8StringEncoding]);
        NSLog(@"response=%@", self.response);
    }
    *response = self.response;
    *error = self.error;
    return self.responseData;
}

- (BOOL)shouldTrustProtectionSpace:(NSURLProtectionSpace *)protectionSpace {
    NSData *certData = [[NSData alloc] initWithBytes:(void*)GD_BUNDLE_DER length:sizeof(GD_BUNDLE_DER) / sizeof(GD_BUNDLE_DER[0])];
    CFDataRef certDataRef = (__bridge_retained CFDataRef)certData;
    SecCertificateRef cert = SecCertificateCreateWithData(NULL, certDataRef);
    
    // Establish a chain of trust anchored on our bundled certificate.
    CFArrayRef certArrayRef = CFArrayCreate(NULL, (void *)&cert, 1, NULL);
    SecTrustRef serverTrust = protectionSpace.serverTrust;
    SecTrustSetAnchorCertificates(serverTrust, certArrayRef);
    
    // Verify that trust.
    SecTrustResultType trustResult;
    SecTrustEvaluate(serverTrust, &trustResult);
    
    // Clean up.
    CFRelease(certArrayRef);
    CFRelease(cert);
    CFRelease(certDataRef);
    
	// Did our custom trust chain evaluate successfully?
    return trustResult == kSecTrustResultUnspecified;
}

#pragma mark NSURLConnection Delegate Methods

- (BOOL)connection:(NSURLConnection *)connection canAuthenticateAgainstProtectionSpace:(NSURLProtectionSpace *)protectionSpace {
    return [protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust];
}

- (void)connection:(NSURLConnection *)connection didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge {
    if ([self shouldTrustProtectionSpace:challenge.protectionSpace]) {
        [challenge.sender useCredential:[NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust] forAuthenticationChallenge:challenge];
    } else {
        [challenge.sender performDefaultHandlingForAuthenticationChallenge:challenge];
    }
}

- (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data {
    [self.responseData appendData:data];
}

- (void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response {
    self.response = response;
    self.isFinished = true;
}

- (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error {
    self.error = error;
    self.isFinished = true;
}

- (void)connectionDidFinishLoading:(NSURLConnection *)connection {
    self.isFinished = true;
}
@end
